# This file was auto-generated by eo2py-maven-plugin
# on 2021.06.27 at 01:42:54. Don't edit it,
# your changes will be discarded on the next build.
# The sources were compiled to XML
# by the EO compiler v.0.1.25.

from eo2py.atoms import *

"""
+package sandbox
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf

[dx dy] > vector
  pow. > length
    add.
      dx.pow 2.0
      dy.pow 2.0
    0.5

[x y] > point
  [to] > distance
    length. > @
      vector
        to.x.sub (^.x)
        to.y.sub (^.y)

[center radius] > circle
  center > @
  [p] > is-inside
    leq. > @
      ^.distance p
      ^.radius

[args...] > app
  stdout > @
    sprintf
      "%b\n"
      is-inside.
        circle
          point 1.0 1.0
          2.0
        point 1.0 1.0
<EOF>
"""


class EOvector(Object):

    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()
        self.attr__phi = DataizationError()
        self.attr_dx = DataizationError()
        self.attr_dy = DataizationError()

        self.attributes = ["dx", "dy", ]
        self.application_counter = 0
        self.varargs = False

    def __call__(self, arg: 'Object'):
        if not self.varargs:
            if self.application_counter >= len(self.attributes):
                raise ApplicationError(arg)
            else:
                setattr(self, "attr_" + self.attributes[self.application_counter], arg)
                self.application_counter += 1
        else:
            if self.application_counter < len(self.attributes) - 1:
                setattr(self, "attr_" + self.attributes[self.application_counter], arg)
                self.application_counter += 1
            elif self.application_counter == len(self.attributes) - 1:
                getattr(self, "attr_" + self.attributes[self.application_counter])(arg)
        return self

    def dataize(self):
        return self.attr__phi.dataize()

    @property
    def attr_length(self):
        return (Attribute((Attribute((Attribute((self.attr_dx), "pow")()(Number(2.0))), "add")()(
            Attribute((self.attr_dy), "pow")()(Number(2.0)))), "pow")()(Number(0.5)))


class EOpoint(Object):

    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()
        self.attr__phi = DataizationError()
        self.attr_x = DataizationError()
        self.attr_y = DataizationError()

        self.attributes = ["x", "y", ]
        self.application_counter = 0
        self.varargs = False

    def __call__(self, arg: 'Object'):
        if not self.varargs:
            if self.application_counter >= len(self.attributes):
                raise ApplicationError(arg)
            else:
                setattr(self, "attr_" + self.attributes[self.application_counter], arg)
                self.application_counter += 1
        else:
            if self.application_counter < len(self.attributes) - 1:
                setattr(self, "attr_" + self.attributes[self.application_counter], arg)
                self.application_counter += 1
            elif self.application_counter == len(self.attributes) - 1:
                getattr(self, "attr_" + self.attributes[self.application_counter])(arg)
        return self

    def dataize(self):
        return self.attr__phi.dataize()

    @property
    def attr_distance(self):
        return partial(EOpointEOdistance, self)


class EOpointEOdistance(Object):

    def __init__(self, attr__parent):
        self.attr__self = self
        self.attr__parent = attr__parent

        self.attr_to = DataizationError()

        self.attributes = ["to", ]
        self.application_counter = 0
        self.varargs = False

    def __call__(self, arg: 'Object'):
        if not self.varargs:
            if self.application_counter >= len(self.attributes):
                raise ApplicationError(arg)
            else:
                setattr(self, "attr_" + self.attributes[self.application_counter], arg)
                self.application_counter += 1
        else:
            if self.application_counter < len(self.attributes) - 1:
                setattr(self, "attr_" + self.attributes[self.application_counter], arg)
                self.application_counter += 1
            elif self.application_counter == len(self.attributes) - 1:
                getattr(self, "attr_" + self.attributes[self.application_counter])(arg)
        return self

    def dataize(self):
        return self.attr__phi.dataize()

    @property
    def attr__phi(self):
        return (Attribute((EOvector()(
            Attribute((Attribute((self.attr_to), "x")()), "sub")()(Attribute((self.attr__parent), "x")()))(
            Attribute((Attribute((self.attr_to), "y")()), "sub")()(Attribute((self.attr__parent), "y")()))),
            "length")())


class EOcircle(Object):

    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()

        self.attr_center = DataizationError()
        self.attr_radius = DataizationError()

        self.attributes = ["center", "radius", ]
        self.application_counter = 0
        self.varargs = False

    def __call__(self, arg: 'Object'):
        if not self.varargs:
            if self.application_counter >= len(self.attributes):
                raise ApplicationError(arg)
            else:
                setattr(self, "attr_" + self.attributes[self.application_counter], arg)
                self.application_counter += 1
        else:
            if self.application_counter < len(self.attributes) - 1:
                setattr(self, "attr_" + self.attributes[self.application_counter], arg)
                self.application_counter += 1
            elif self.application_counter == len(self.attributes) - 1:
                getattr(self, "attr_" + self.attributes[self.application_counter])(arg)
        return self

    def dataize(self):
        return self.attr__phi.dataize()

    @property
    def attr__phi(self):
        return (self.attr_center)

    @property
    def attr_is_inside(self):
        return partial(EOcircleEOis_inside, self)


class EOcircleEOis_inside(Object):

    def __init__(self, attr__parent):
        self.attr__self = self
        self.attr__parent = attr__parent

        self.attr_p = DataizationError()

        self.attributes = ["p", ]
        self.application_counter = 0
        self.varargs = False

    def __call__(self, arg: 'Object'):
        if not self.varargs:
            if self.application_counter >= len(self.attributes):
                raise ApplicationError(arg)
            else:
                setattr(self, "attr_" + self.attributes[self.application_counter], arg)
                self.application_counter += 1
        else:
            if self.application_counter < len(self.attributes) - 1:
                setattr(self, "attr_" + self.attributes[self.application_counter], arg)
                self.application_counter += 1
            elif self.application_counter == len(self.attributes) - 1:
                getattr(self, "attr_" + self.attributes[self.application_counter])(arg)
        return self

    def dataize(self):
        return self.attr__phi.dataize()

    @property
    def attr__phi(self):
        return (Attribute((Attribute((self.attr__parent), "distance")()(self.attr_p)), "leq")()(
            Attribute((self.attr__parent), "radius")()))


class EOapp(Object):

    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()

        self.attr_args = Array()

        self.attributes = ["args", ]
        self.application_counter = 0
        self.varargs = True

    def __call__(self, arg: 'Object'):
        if not self.varargs:
            if self.application_counter >= len(self.attributes):
                raise ApplicationError(arg)
            else:
                setattr(self, "attr_" + self.attributes[self.application_counter], arg)
                self.application_counter += 1
        else:
            if self.application_counter < len(self.attributes) - 1:
                setattr(self, "attr_" + self.attributes[self.application_counter], arg)
                self.application_counter += 1
            elif self.application_counter == len(self.attributes) - 1:
                getattr(self, "attr_" + self.attributes[self.application_counter])(arg)
        return self

    def dataize(self):
        return self.attr__phi.dataize()

    @property
    def attr__phi(self):
        return (Stdout()(Sprintf()(String("%s\n"))(
            Attribute((EOcircle()(EOpoint()(Number(1.0))(Number(1.0)))(Number(2.0))), "is_inside")()(
                EOpoint()(Number(1.0))(Number(1.0))))))


def test_vector():
    assert EOvector()(Number(1))(Number(1))
    assert EOapp().dataize()
