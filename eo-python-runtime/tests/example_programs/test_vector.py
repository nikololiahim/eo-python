# This file was auto-generated by eo2py-maven-plugin
# on 2021.07.05 at 00:59:07. Don't edit it,
# your changes will be discarded on the next build.
# The sources were compiled to XML
# by the EO compiler v.0.1.25.

from eo2py.atoms import *
from functools import partial

"""
+package sandbox
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf

[dx dy] > vector
  pow. > length
    add.
      dx.pow 2.0
      dy.pow 2.0
    0.5

[x y] > point
  [to] > distance
    length. > @
      vector
        to.x.sub (^.x)
        to.y.sub (^.y)

[center radius] > circle
  center > @
  [p] > is-inside
    leq. > @
      ^.distance p
      ^.radius

[args...] > app
  stdout > @
    sprintf
      "%s\n"
      is-inside.
        circle
          point 1.0 1.0
          2.0
        point 1.0 1.0
<EOF>
"""



class EOvector(ApplicationMixin, Object):

    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()
        self.attr__phi = DataizationError()
        self.attr_dx = DataizationError()
        self.attr_dy = DataizationError()

        self.attributes = ["dx", "dy", ]




    @property
    def attr_length(self):
        return (Attribute((Attribute((Attribute((self.attr_dx), "pow")((Number(2.0)))), "add")(Attribute((self.attr_dy), "pow")((Number(2.0))))), "pow")((Number(0.5))))





class EOpoint(ApplicationMixin, Object):

    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()
        self.attr__phi = DataizationError()
        self.attr_x = DataizationError()
        self.attr_y = DataizationError()

        self.attributes = ["x", "y", ]




    @property
    def attr_distance(self):
        return EOpointEOdistance(self)





class EOpointEOdistance(ApplicationMixin, Object):

    def __init__(self, attr__parent):
        self.attr__self = self
        self.attr__parent = attr__parent
        self.attr_to = DataizationError()

        self.attributes = ["to", ]




    @property
    def attr__phi(self):
        return (Attribute((EOvector()("dx", (Attribute((Attribute((self.attr_to), "x")), "sub")(Attribute((self.attr__parent), "x"))))("dy", (Attribute((Attribute((self.attr_to), "y")), "sub")(Attribute((self.attr__parent), "y"))))), "length"))





class EOcircle(ApplicationMixin, Object):

    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()
        self.attr_center = DataizationError()
        self.attr_radius = DataizationError()

        self.attributes = ["center", "radius", ]




    @property
    def attr__phi(self):
        return (self.attr_center)

    @property
    def attr_is_inside(self):
        return EOcircleEOis_inside(self)





class EOcircleEOis_inside(ApplicationMixin, Object):

    def __init__(self, attr__parent):
        self.attr__self = self
        self.attr__parent = attr__parent
        self.attr_p = DataizationError()

        self.attributes = ["p", ]




    @property
    def attr__phi(self):
        return (Attribute((Attribute((self.attr__parent), "distance")("to", (self.attr_p))), "leq")(Attribute((self.attr__parent), "radius")))





class EOapp(ApplicationMixin, Object):

    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()
        self.attr_args = Array()

        self.attributes = ["args", ]

        self.varargs = True


    @property
    def attr__phi(self):
        return (Stdout()(Sprintf()((String("%s\n")))(Attribute((EOcircle()("center", (EOpoint()("x", ((Number(1.0))))("y", ((Number(1.0))))))("radius", ((Number(2.0))))), "is_inside")("p", (EOpoint()("x", ((Number(1.0))))("y", ((Number(1.0)))))))))





def test_vector():
    assert EOapp().dataize() == Boolean(True)
