# This file was auto-generated by eo2py-maven-plugin
# on 2021.07.05 at 18:17:47. Don't edit it,
# your changes will be discarded on the next build.
# The sources were compiled to XML
# by the EO compiler v.0.1.25.

from eo2py.atoms import *

"""
[] > hello
  stdout > @
    sprintf > hello_fmt
      "%s %s" > fmt
      "hello" > msg
      fmt


[] > h
  hello > @

[] > hello_world
  stdout > @
    sprintf > world
      (h.fmt)
      (h.msg)
      "world"

[n] > fibonacci
  if. > @
    n.less 2
    n
    add.
      fibonacci (n.sub 1)
      fibonacci (n.sub 2)

[args...] > app
  stdout > @
    sprintf
      "%dth Fibonacci number is %d\n"
      args.get 0 > n
      fibonacci n

<EOF>
"""


class EOhello(ApplicationMixin, Object):
    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()

        self.attributes = []

    @property
    def attr__phi(self):
        return Stdout()(self.attr_hello_fmt)

    @property
    def attr_hello_fmt(self):
        return Sprintf()(self.attr_fmt)(self.attr_msg)(self.attr_fmt)

    @property
    def attr_fmt(self):
        return String("%s %s")

    @property
    def attr_msg(self):
        return String("hello")


class EOh(ApplicationMixin, Object):
    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()

        self.attributes = []

    @property
    def attr__phi(self):
        return EOhello()


class EOhello_world(ApplicationMixin, Object):
    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()

        self.attributes = []

    @property
    def attr__phi(self):
        return Stdout()(self.attr_world)

    @property
    def attr_world(self):
        return Sprintf()(Attribute((EOh()), "fmt"))(Attribute((EOh()), "msg"))(
            (String("world"))
        )


class EOfibonacci(ApplicationMixin, Object):
    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()

        self.attr_n = DataizationError()

        self.attributes = [
            "n",
        ]

    @property
    def attr__phi(self):
        return Attribute((Attribute((self.attr_n), "less")((Number(2)))), "if")(
            self.attr_n
        )(
            Attribute(
                (EOfibonacci()(Attribute((self.attr_n), "sub")((Number(1))))), "add"
            )(EOfibonacci()(Attribute((self.attr_n), "sub")((Number(2)))))
        )


class EOapp(ApplicationMixin, Object):
    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()

        self.attr_args = Array()

        self.attributes = [
            "args",
        ]

        self.varargs = True

    @property
    def attr__phi(self):
        return Stdout()(
            Sprintf()((String("%dth Fibonacci number is %d\n")))(self.attr_n)(
                EOfibonacci()(self.attr_n)
            )
        )

    @property
    def attr_n(self):
        return Attribute((self.attr_args), "get")((Number(0)))


import pytest
from .utils import fibonacci


def test_inline_attributes(capsys):
    assert EOhello_world().dataize()
    assert "hello world" in capsys.readouterr().out


def test_hello(capsys):
    hello = EOhello()
    assert hello.dataize()
    hello_hello = Attribute(hello, "hello_fmt").dataize().data()
    fmt = Attribute(hello, "fmt").dataize().data()
    msg = Attribute(hello, "msg").dataize().data()
    output = capsys.readouterr().out
    assert str(fmt) in str(hello_hello)
    assert str(msg) in str(hello_hello)
    assert str(hello_hello) in output


@pytest.mark.parametrize("n", list(range(1, 10)))
def test_fibonacci_with_input(capsys, n):
    assert EOapp()(Number(n)).dataize()
    assert f"{n}th Fibonacci number is {fibonacci(n)}" in capsys.readouterr().out
