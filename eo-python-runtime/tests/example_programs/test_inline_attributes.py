# This file was auto-generated by eo2py-maven-plugin
# on 2021.07.03 at 23:33:32. Don't edit it,
# your changes will be discarded on the next build.
# The sources were compiled to XML
# by the EO compiler v.0.1.25.

from eo2py.atoms import *
from functools import partial

"""
[n] > fibonacci
  if. > @
    n.less 2
    n
    add.
      fibonacci (n.sub 1)
      fibonacci (n.sub 2)

[args...] > app
  stdout > @
    sprintf
      "%dth Fibonacci number is %d\n"
      args.get 0 > n
      fibonacci n
<EOF>
"""


class EOfibonacci(ApplicationMixin, Object):
    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()

        self.attr_n = DataizationError()

        self.attributes = [
            "n",
        ]

    @property
    def attr__phi(self):
        return Attribute((Attribute((self.attr_n), "less")((Number(2)))), "if")(
            self.attr_n
        )(
            Attribute(
                (EOfibonacci()(Attribute((self.attr_n), "sub")((Number(1))))), "add"
            )(EOfibonacci()(Attribute((self.attr_n), "sub")((Number(2)))))
        )


class EOapp(ApplicationMixin, Object):
    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()

        self.attr_args = Array()

        self.attributes = [
            "args",
        ]

        self.varargs = True

    @property
    def attr__phi(self):
        return Stdout()(
            Sprintf()((String("%dth Fibonacci number is %d\n")))(self.attr_n)(
                EOfibonacci()(self.attr_n)
            )
        )

    @property
    def attr_n(self):
        return Attribute((self.attr_args), "get")((Number(0)))


import pytest


def fibonacci(n):
    if n < 3:
        return 1
    else:
        memo = [1] * n
        for i in range(2, n):
            memo[i] = memo[i - 1] + memo[i - 2]
        return memo[n - 1]


@pytest.mark.parametrize("n", list(range(1, 10)))
def test_inline_attributes(capsys, n):
    assert EOapp()(Number(n)).dataize()
    assert f"{n}th Fibonacci number is {fibonacci(n)}" in capsys.readouterr().out
