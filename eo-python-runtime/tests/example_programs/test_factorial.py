# This file was auto-generated by eo2py-maven-plugin
# on 2021.06.30 at 12:02:43. Don't edit it,
# your changes will be discarded on the next build.
# The sources were compiled to XML
# by the EO compiler v.0.1.25.

from eo2py.atoms import *
from functools import partial
import pytest

"""
+package sandbox
+alias sprintf org.eolang.txt.sprintf

[n] > factorial
  if. > @
    less.
      n
      2
    1
    mul.
      n
      factorial
        sub.
          n
          1

[args...] > appFactorial
   stdout > @
     sprintf
       "%d! = %d\n"
       (args.get 0)
       factorial (args.get 0)

<EOF>
"""


class EOfactorial(ApplicationMixin, Object):
    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()

        self.attr_n = DataizationError()

        self.attributes = [
            "n",
        ]

    @property
    def attr__phi(self):
        return Attribute((Attribute((self.attr_n), "less")(Number(2))), "if")(
            Number(1)
        )(
            Attribute((self.attr_n), "mul")(
                EOfactorial()(Attribute((self.attr_n), "sub")(Number(1)))
            )
        )


class EOappFactorial(ApplicationMixin, Object):
    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()

        self.attr_args = Array()

        self.attributes = [
            "args",
        ]

        self.varargs = True

    @property
    def attr__phi(self):
        return Stdout()(
            Sprintf()(String("%d! = %d\n"))(
                Attribute((self.attr_args), "get")(Number(0))
            )(EOfactorial()(Attribute((self.attr_args), "get")(Number(0))))
        )


def factorial(n):
    if n < 2:
        return 1
    else:
        return factorial(n - 1) * n


@pytest.mark.parametrize("n", list(range(-2, 10)))
def test_factorial(capsys, n):
    eo_factorial = EOfactorial()(Number(n))
    assert eo_factorial.dataize() == Number(factorial(n))
    app = EOappFactorial()(Number(n))
    app.dataize()
    assert f"{n}! = {factorial(n)}\n" in capsys.readouterr().out
