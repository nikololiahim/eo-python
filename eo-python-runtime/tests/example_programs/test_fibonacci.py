# This file was auto-generated by eo2py-maven-plugin
# on 2021.07.03 at 20:56:59. Don't edit it,
# your changes will be discarded on the next build.
# The sources were compiled to XML
# by the EO compiler v.0.1.25.

from eo2py.atoms import *
from functools import partial

"""
+package sandbox

[n] > fibonacci
  if. > @
    n.less 3
    small n
    rec n 1 1

  [n] > small
    if. > @
      n.eq 2
      1
      n

  [n minus1 minus2] > rec
    if. > @
      n.eq 3
      minus1.add minus2
      rec (n.sub 1) (minus1.add minus2) minus1
<EOF>
"""


class EOfibonacci(ApplicationMixin, Object):
    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()

        self.attr_n = DataizationError()

        self.attributes = [
            "n",
        ]

    @property
    def attr__phi(self):
        return Attribute((Attribute((self.attr_n), "less")((Number(3)))), "if")(
            self.attr_small()(self.attr_n)
        )(self.attr_rec()(self.attr_n)((Number(1)))((Number(1))))

    @property
    def attr_small(self):
        return partial(EOfibonacciEOsmall, self)

    @property
    def attr_rec(self):
        return partial(EOfibonacciEOrec, self)


class EOfibonacciEOsmall(ApplicationMixin, Object):
    def __init__(self, attr__parent):
        self.attr__self = self
        self.attr__parent = attr__parent

        self.attr_n = DataizationError()

        self.attributes = [
            "n",
        ]

    @property
    def attr__phi(self):
        return Attribute((Attribute((self.attr_n), "eq")((Number(2)))), "if")(
            (Number(1))
        )(self.attr_n)


class EOfibonacciEOrec(ApplicationMixin, Object):
    def __init__(self, attr__parent):
        self.attr__self = self
        self.attr__parent = attr__parent

        self.attr_n = DataizationError()
        self.attr_minus1 = DataizationError()
        self.attr_minus2 = DataizationError()

        self.attributes = [
            "n",
            "minus1",
            "minus2",
        ]

    @property
    def attr__phi(self):
        return Attribute((Attribute((self.attr_n), "eq")((Number(3)))), "if")(
            Attribute((self.attr_minus1), "add")(self.attr_minus2)
        )(
            EOfibonacciEOrec(self.attr__parent)(
                Attribute((self.attr_n), "sub")((Number(1)))
            )(Attribute((self.attr_minus1), "add")(self.attr_minus2))(self.attr_minus1)
        )


import pytest

from .utils import fibonacci


@pytest.mark.parametrize("n", list(range(1, 11)))
def test_fibonacci(n):
    assert EOfibonacci()(Number(n)).dataize() == Number(fibonacci(n))
