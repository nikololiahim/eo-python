# This file was auto-generated by eo2py-maven-plugin
# on 2021.06.27 at 19:04:49. Don't edit it,
# your changes will be discarded on the next build.
# The sources were compiled to XML
# by the EO compiler v.0.1.25.

from eo2py.atoms import *
from functools import partial

"""
[value] > number
  value > @

[@] > decorator
  add. > incremented_value
     @
     1

[args...] > app
  number 5 > n
  decorator n > decorated_number
  stdout > @
    sprintf
      "%d %d\n"
      n
      (decorated_number.incremented_value)

<EOF>
"""


class EOnumber(ApplicationMixin, Object):

    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()

        self.attr_value = DataizationError()

        self.attributes = ["value", ]

    @property
    def attr__phi(self):
        return (self.attr_value)


class EOdecorator(ApplicationMixin, Object):

    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()

        self.attr__phi = DataizationError()

        self.attributes = ["_phi", ]

    @property
    def attr_incremented_value(self):
        return (Attribute((self.attr__phi), "add")(Number(1)))


class EOapp(ApplicationMixin, Object):

    def __init__(self):
        self.attr__self = self
        self.attr__parent = DataizationError()

        self.attr_args = Array()

        self.attributes = ["args", ]

        self.varargs = True

    @property
    def attr_n(self):
        return (EOnumber()(Number(5)))

    @property
    def attr_decorated_number(self):
        return (EOdecorator()(self.attr_n))

    @property
    def attr__phi(self):
        return (Stdout()(
            Sprintf()(String("%d %d\n"))(self.attr_n)(Attribute((self.attr_decorated_number), "incremented_value"))))


def free_decoratee(capsys):
    assert EOapp().dataize()
    stdout = capsys.readouterr().out.strip()
    assert stdout.splitlines(keepends=True)[-1] == '5 6'
